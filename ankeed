#!/bin/python

from lxml import etree
import socket
import os
import traceback
import requests
import sys
import re

def send_parsed_entries(csock, pe):
    l = bytearray()
    l.append((len(pe) & 0xFF00) >> 8)
    l.append((len(pe) & 0x00FF)     )

    for i in pe:
        l.append(len(i['t']))
        for j in i['t']:
            cs = j.encode('utf-8')
            l.append(len(cs))
            for x in cs:
                l.append(x)

        l.append(len(i['r']))
        for j in i['r']:
            cs = j.encode('utf-8')
            l.append(len(cs))
            for x in cs:
                l.append(x)

        l.append(len(i['m']))
        for j in i['m']:
            l.append(len(j['t']))
            for x in j['t']:
                cs = x.encode('utf-8')
                l.append(len(cs))
                for x in cs:
                    l.append(x)

            l.append(len(j['p']))
            for x in j['p']:
                cs = x.encode('utf-8')
                l.append(len(cs))
                for x in cs:
                    l.append(x)

    csock.send(l)


def fix(a):
    nn = 0
    ad = 0
    r = []
    for x in a:
        match x:
            case "nouns which may take the genitive case particle 'no'":
                r.append("Noun (takes の)")
                nn = 1
            case "noun (common) (futsuumeishi)":
                r.append("Noun")
            case "adverb taking the 'to' particle":
                r.append("Adverb (takes と)")
                ad = 1
            case "adverb (fukushi)":
                r.append("Adverb")
            case "noun, used as a prefix":
                r.append("Noun (prefix)")
            case "noun, used as a suffix":
                r.append("Noun (suffix)")
            case "noun or verb acting prenominally":
                r.append("Noun (acting prenom)")
            case "adverbial noun (fukushitekimeishi)":
                r.append("Noun (adv)")
            case "proper noun":
                r.append("Noun (proper)")
            case "noun (temporal) (jisoumeishi)":
                r.append("Noun (temporal)")
            case "adjective (keiyoushi)" | "adjective (keiyoushi) - yoi/ii class":
                r.append("Adjective")
            case "'kari' adjective (archaic)":
                r.append("Kuri adjective")
            case "'ku' adjective (archaic)":
                r.append("Ku adjective")
            case "'shiku' adjective (archaic)":
                r.append("Shiku adjective")
            case "'taru' adjective":
                r.append("Taru adj")
                ad = 1;
            case "archaic/formal form of na-adjective":
                r.append("Archaic na-adjective")
            case "pre-noun adjectival (rentaishi)":
                r.append("Pre noun adj")
            case "auxiliary":
                r.append("Aux")
            case "auxiliary adjective":
                r.append("Aux adj")
            case "auxiliary verb":
                r.append("Aux verb")
            case "conjunction":
                r.append("Conj")
            case "copula":
                r.append("Copula")
            case "counter":
                r.append("Counter")
            case "expressions (phrases, clauses, etc.)":
                r.append("Expression")
            case "interjection (kandoushi)":
                r.append("Interj")
            case "numeric":
                r.append("Numeric")
            case "pronoun":
                r.append("Pronoun")
            case "prefix":
                r.append("Prefix")
            case "particle":
                r.append("Particle")
            case "suffix":
                r.append("Suffix")

            case "Godan verb with 'bu' ending":
                r.append("Verb")
            case "Godan verb with 'gu' ending":
                r.append("Verb")
            case "Godan verb with 'ku' ending":
                r.append("Verb")
            case "Godan verb with 'mu' ending":
                r.append("Verb")
            case "Godan verb with 'nu' ending":
                r.append("Verb")
            case "Godan verb with 'su' ending":
                r.append("Verb")
            case "Godan verb with 'u' ending":
                r.append("Verb")
            case "Godan verb with 'ru' ending":
                r.append("Godan verb with ru ending")


            case _:
                r.append(x)

    
    if nn:
        while True:
            try:
                r.remove("Noun")
            except:
                break
    
    if ad:
        while True:
            try:
                r.remove("Adverb")
            except:
                break

    return r

def gint(l, s):
    r = []
    for i in range(0, l):
        r.append((s[2 * i], s[2 * i + 1]))
    return r

hiragana_full = r'[ぁ-ゟ]'
katakana_full = r'[゠-ヿ]'
kanji = r'[㐀-䶵一-鿋豈-頻]'
radicals = r'[⺀-⿕]'
katakana_half_width = r'[｟-ﾟ]'
alphanum_full = r'[！-～]'
symbols_punct = r'[、-〿]'
misc_symbols = r'[ㇰ-ㇿ㈠-㉃㊀-㋾㌀-㍿]'
ascii_char = r'[ -~]'

def extract_unicode_block(unicode_block, string):
    return re.findall(unicode_block, string)

def has_kanji(s):
    kj = extract_unicode_block(kanji, s)
    return len(kj) > 0

cp = []
def check(s, t, x):
    sl = len(s)
    tl = len(t)
    if sl >= tl:
        if s[sl - tl:sl] == t:
            print(f'{s} - {t} -> {s[0:sl-tl] + x}')
            cp.append(s[0:sl-tl] + x)

r = [
        ('きます', 'く'),
        ('いた', 'く'),
        ('きました', 'く'),
        ('いて', 'く'),
        ('かなくて', 'く'),
        ('かない', 'く'),
        ('きません', 'く'),
        ('かなかった', 'く'),
        ('きあせんでした', 'く'),
        ('こう', 'く'),
        ('きましょう', 'く'),
        ('ける', 'く'),
        ('けます', 'く'),
        ('かれる', 'く'),
        ('かれます', 'く'),
        ('けない', 'く'),
        ('けません', 'く'),
        ('かれない', 'く'),
        ('かれません', 'く'),
        ('かせる', 'く'),
        ('かせます', 'く'),
        ('かせない', 'く'),
        ('かせません', 'く'),
        ('け', 'く'),
        ('くな', 'く'),
        ('けば', 'く'),
        ('けなければ', 'く'),
        
        ('ます', 'る'),
        ('います', 'る'),
        ('いない', 'る'),
        ('いません', 'る'),
        ('いた', 'る'),
        ('いました', 'る'),
        ('いなかった', 'る'),
        ('いませんでした', 'る'),
        ('いて', 'る'),
        ('いなくて', 'る'),
        ('いよう', 'る'),
        ('いましょう', 'る'),
        ('いられる', 'る'),
        ('いられます', 'る'),
        ('いられない', 'る'),
        ('いられません', 'る'),
        ('いさせる', 'る'),
        ('いさせます', 'る'),
        ('いさせない', 'る'),
        ('いさせません', 'る'),
        ('いよ', 'る'),
        ('いろ', 'る'),
        ('いるな', 'る'),
        ('いれば', 'る'),
        ('いなければ', 'る'),

        ('ります', 'る'),
        ('らない', 'る'),
        ('りません', 'る'),
        ('った', 'る'),
        ('りました', 'る'),
        ('らなかった', 'る'),
        ('りませんでした', 'る'),
        ('って', 'る'),
        ('らなくて', 'る'),
        ('ろう', 'る'),
        ('りましょう', 'る'),
        ('れる', 'る'),
        ('れます', 'る'),
        ('れない', 'る'),
        ('れません', 'る'),
        ('られる', 'る'),
        ('られます', 'る'),
        ('られない', 'る'),
        ('られません', 'る'),
        ('らせる', 'る'),
        ('らせます', 'る'),
        ('らせない', 'る'),
        ('らせません', 'る'),
        ('れ', 'る'),
        ('るな', 'る'),
        ('れば', 'る'),
        ('れなければ', 'る'),

        ('います', 'う'),
        ('わない', 'う'),
        ('いません', 'う'),
        ('った', 'う'),
        ('いました', 'う'),
        ('わなかった', 'う'),
        ('いませんでした', 'う'),
        ('って', 'う'),
        ('わなくて', 'う'),
        ('おう', 'う'),
        ('いましょう', 'う'),
        ('える', 'う'),
        ('えます', 'う'),
        ('えない', 'う'),
        ('えません', 'う'),
        ('われる', 'う'),
        ('われます', 'う'),
        ('われない', 'う'),
        ('われません', 'う'),
        ('わせる', 'う'),
        ('わせます', 'う'),
        ('わせない', 'う'),
        ('わせません', 'う'),
        ('え', 'う'),
        ('うな', 'う'),
        ('えば', 'う'),
        ('えなければ', 'う'),

        ('びます', 'ぶ'),
        ('ばない', 'ぶ'),
        ('びません', 'ぶ'),
        ('んだ', 'ぶ'),
        ('びました', 'ぶ'),
        ('ばなかった', 'ぶ'),
        ('びませんえした', 'ぶ'),
        ('んで', 'ぶ'),
        ('ばなくて', 'ぶ'),
        ('ぼう', 'ぶ'),
        ('ばせます', 'ぶ'),
        ('ばせない', 'ぶ'),
        ('ばせません', 'ぶ'),
        ('べ', 'ぶ'),
        ('ぶな', 'ぶ'),
        ('べば', 'ぶ'),
        ('べなければ', 'ぶ'),

        ('ぎます', 'ぐ'),
        ('いだ', 'ぐ'),
        ('がない', 'ぐ'),
        ('ぎません', 'ぐ'),
        ('ぎました', 'ぐ'),
        ('がなかった', 'ぐ'),
        ('ぎませんでした', 'ぐ'),
        ('いで', 'ぐ'),
        ('がなくて', 'ぐ'),
        ('ごう', 'ぐ'),
        ('ぎましょう', 'ぐ'),
        ('げる', 'ぐ'),
        ('げます', 'ぐ'),
        ('げない', 'ぐ'),
        ('げません', 'ぐ'),
        ('がれる', 'ぐ'),
        ('がれます', 'ぐ'),
        ('がれない', 'ぐ'),
        ('がれません', 'ぐ'),
        ('がせる', 'ぐ'),
        ('がせます', 'ぐ'),
        ('がせない', 'ぐ'),
        ('がせません', 'ぐ'),
        ('げ', 'ぐ'),
        ('ぐな', 'ぐ'),
        ('げば', 'ぐ'),
        ('げなければ', 'ぐ'),

        ('みます', 'む'),
        ('まない', 'む'),
        ('みません', 'む'),
        ('んだ', 'む'),
        ('みました', 'む'),
        ('まなかった', 'む'),
        ('みませんでした', 'む'),
        ('んで', 'む'),
        ('まなくて', 'む'),
        ('ませる', 'む'),
        ('ませます', 'む'),
        ('ませない', 'む'),
        ('ませません', 'む'),
        ('め', 'む'),
        ('むな', 'む'),
        ('めば', 'む'),
        ('めなければ', 'む'),

        ('にます', 'ぬ'),
        ('なない', 'ぬ'),
        ('にません', 'ぬ'),
        ('んだ', 'ぬ'),
        ('にました', 'ぬ'),
        ('ななかった', 'ぬ'),
        ('にませんでした', 'ぬ'),
        ('んで', 'ぬ'),
        ('ななくて', 'ぬ'),
        ('のう', 'ぬ'),
        ('にましょう', 'ぬ'),
        ('ねる', 'ぬ'),
        ('ねます', 'ぬ'),
        ('ねない', 'ぬ'),
        ('ねません', 'ぬ'),
        ('なれる', 'ぬ'),
        ('なれます', 'ぬ'),
        ('なれない', 'ぬ'),
        ('なれません', 'ぬ'),
        ('なせる', 'ぬ'),
        ('なせます', 'ぬ'),
        ('なせない', 'ぬ'),
        ('なせません', 'ぬ'),
        ('ね', 'ぬ'),
        ('ねな', 'ぬ'),
        ('ねば', 'ぬ'),
        ('わなければ', 'ぬ'),

        ('します', 'す'),
        ('さない', 'す'),
        ('しません', 'す'),
        ('した', 'す'),
        ('しました', 'す'),
        ('さなかった', 'す'),
        ('しませんでした', 'す'),
        ('して', 'す'),
        ('さなくて', 'す'),
        ('そう', 'す'),
        ('しましょう', 'す'),
        ('せる', 'す'),
        ('せます', 'す'),
        ('せない', 'す'),
        ('せません', 'す'),
        ('される', 'す'),
        ('されます', 'す'),
        ('されない', 'す'),
        ('されません', 'す'),
        ('させる', 'す'),
        ('させます', 'す'),
        ('させない', 'す'),
        ('させません', 'す'),
        ('せ', 'す'),
        ('すな', 'す'),
        ('せば', 'す'),
        ('せなければ', 'す'),

        ('ちます', 'つ'),
        ('たない', 'つ'),
        ('ちません', 'つ'),
        ('った', 'つ'),
        ('ちました', 'つ'),
        ('たなかった', 'つ'),
        ('ちませんでした', 'つ'),
        ('って', 'つ'),
        ('たなくて', 'つ'),
        ('とう', 'つ'),
        ('ちましょう', 'つ'),
        ('てる', 'つ'),
        ('てます', 'つ'),
        ('てない', 'つ'),
        ('てません', 'つ'),
        ('たれる', 'つ'),
        ('たれます', 'つ'),
        ('たれない', 'つ'),
        ('たれません', 'つ'),
        ('たせる', 'つ'),
        ('たせます', 'つ'),
        ('たせない', 'つ'),
        ('たせません', 'つ'),
        ('て', 'つ'),
        ('つな', 'つ'),
        ('てば', 'つ'),
        ('てなければ', 'つ')]

def gfix(s):
    cp = []
    
    for i in r:
        check(s, i[0], i[1])

def main():
    spath = '/tmp/ankeed.sock'
    if os.path.exists(spath):
        os.remove(spath)

    tree = etree.parse('/usr/share/ankee/JMdict_e.xml')
    print('Done reading!')

    server = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    server.bind(spath)
    server.listen()
    try:
        while True:
            (cs, addr) = server.accept()
            print(f'Got connection fron {addr}')
            while True:
                l = 0
                try: 
                    print('Waiting')
                    r = cs.recv(3)
                    l = r[0] << 8 | r[1]
                    if l == 0:
                        break
                except:
                    break
                if r[2] == 0:
                    text = cs.recv(l).decode("utf-8").replace('\x00', '')
                    print(f'Got {text}')

                    gfix(text)
                    print(f'Fixed to {cp}')

                    es = []
                    for t in cp:
                        if has_kanji(t):
                            for x in tree.findall(f"//entry/k_ele[keb='{t}']"): # TODO: Xpath 'or' what the fuck
                                par = x.getparent()
                                if par not in es:
                                    es.append(par)
                        else:
                            for x in tree.findall(f"//entry/r_ele[reb='{t}']"): # TODO: Xpath 'or' what the fuck
                                par = x.getparent()
                                if par not in es:
                                    es.append(par)

                    print(f'Got {es}')
                    pe = []
                    for s in es:
                        st = ''
                        entry = {'t': [], 'r': [], 'm': []}
                        # print(etree.tostring(s, pretty_print=False).decode('utf-8'))
                        for x in s.findall('.//k_ele/keb'):
                            entry['t'].append(x.text)
                        for x in s.findall('.//r_ele/reb'):
                            entry['r'].append(x.text)
                        for x in s.findall('.//sense'):
                            meaning = {'t': [], 'p': []}
                            for y in x.findall('.//pos'):
                                meaning['p'].append(y.text)
                            for y in x.findall('.//gloss'):
                                meaning['t'].append(y.text)
                            meaning['t'][0] = meaning['t'][0].capitalize()
                            meaning['p'] = fix(meaning['p'])
                            entry['m'].append(meaning)
                        pe.append(entry)
                    print(f'Sending {pe}')
                    send_parsed_entries(cs, pe)
                else:
                    text = cs.recv(l).decode("utf-8").replace('\x00', '')
                    # print(f'Recv {l}: {text}');
                    tll = cs.recv(2)
                    tl = tll[0] << 8 | tll[1]
                    ot = cs.recv(tl).decode("utf-8").replace('\x00', '')
                    # print(f'And got {tl}:{ot}');
                    dot = ot.split('\n')
                    l = int.from_bytes(cs.recv(1), byteorder='big')
                    ints = gint(l, cs.recv(l * 2))
                    # print(f'With {l}: {ints}');

                    al = int.from_bytes(cs.recv(1), byteorder='big')
                    at = cs.recv(al).decode("utf-8").replace('\x00', '')
                    # print(f'Apath {al}: {at}')

                    cd = 0
                    for i in range(len(ints)):
                        adds = f'<b>{dot[i].split("[")[0].split("/")[0]}</b>'
                        text = f'{text[0:ints[i][0] + cd]}{adds}{text[ints[i][0] + ints[i][1] + cd:-1]}'
                        cd += len(adds) - ints[i][1]

                    fname = at.split("/")[-1]
                    # print(text)
                    s = f'{{\
"action": "addNote",\
"version": 6,\
"params": {{\
"note": {{\
"deckName": "Sentence Mining",\
"modelName": "SentenceMining",\
"fields": {{\
"Sentence": "{text}",\
"Words": "{ot}",\
"Audio": ""\
}},\
"options": {{\
"allowDuplicate": false,\
"duplicateScope": "deck",\
"duplicateScopeOptions": {{\
"deckName": "Sentence Mining",\
"checkChildren": false,\
"checkAllModels": false\
}}\
}},\
"tags": [\
"audio"\
],\
"audio": [{{\
"filename": "{fname}",\
"path": "{at}",\
"fields": [\
"Audio"\
]\
}}]\
}}\
}}\
}}'.encode('utf-8')
                    # print(s)
                    try:
                        requests.post('http://localhost:8765', s)
                    except:
                        os.system('herbe "Could not connect to the AnkiConnect server!" & disown')

                    try:
                        os.remove(at)
                    except:
                        print(f'Could not remove file {at}!', file=sys.stderr)
            cs.close()
    except Exception as e:
        print(e, file=sys.stderr)
        print(traceback.format_exc(), file=sys.stderr)
        pass
    server.close()
    os.remove(spath)

if __name__ == '__main__':
    main()
